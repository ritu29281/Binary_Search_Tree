Input:
        10
      /   \
     2    11
   /  \ 
  1    5
      /  \
     3    6
      \
       4
key = 8
Output: 
6 10
Explanation: 
In the given BST the inorder predecessor of 8 is 6 and inorder successor of 8 is 10.
CODE:

 Node* predecessor(Node*root,int key){
      Node*pre=0;
      Node*curr=root;
      while(curr){
          if(curr->key<key){
              pre=curr;
              curr=curr->right;
          }
          else{
              curr=curr->left;
          }
      }
      return pre;
    }
    Node* successor(Node*root,int key){
        Node*succ=0;
        Node*curr=root;
        while(curr){
            if(curr->key>key){
                succ=curr;
                curr=curr->left;
            }
            else{
                curr=curr->right;
            }
        }
        return succ;
    }
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
       pre=predecessor(root,key);
       suc=successor(root,key);
    }
