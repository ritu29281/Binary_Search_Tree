Input:
BST1:
       5
     /   \
    3     7
   / \   / \
  2   4 6   8

BST2:
       10
     /    \
    6      15
   / \    /  \
  3   8  11   18

x = 16
Output:
3
Explanation:
The pairs are: (5, 11), (6, 10) and (8, 8)
CODE:

int countPairs(Node* root1, Node* root2, int x)
    { 
      if(!root1 && !root2)
        {
            return 0;
        }
      int ans=0;
      stack<Node*>s1;
      stack<Node*>s2;
      Node* a=root1;
      Node* b=root2;
      while(1){
          while(a){
            s1.push(a);
            a=a->left;
          }
           while(b){
            s2.push(b);
            b=b->right;
          }
          if(s1.empty() || s2.empty()){
             return ans;
          }
          auto atop=s1.top();
          auto btop=s2.top();
          int sum= atop->data+btop->data;
          if(sum==x){
            ++ans;
            s1.pop();
            s2.pop();
            a=atop->right;
            b=btop->left;
          }
          else if(sum<x){
              s1.pop();
              a=atop->right;
          }
          else{
              s2.pop();
              b=btop->left;
          }
          
      }
      return ans;
      
    }

!-----------------OR------------------!
  void find(Node* root, int x, int &ans){
        
        if(root==NULL)
            return;
        
        if(root->data == x){
            ans++;
            return;
        }
        if(root->data > x)
            find(root->left, x, ans);
        else
            find(root->right, x, ans);
        
    }

    void solve(Node* root1, Node* root2, int x, int &ans){
        
        if(root1==NULL)
            return;
        
        solve(root1->left, root2, x, ans);
        find(root2, x-root1->data, ans);
        solve(root1->right, root2, x, ans);
        
    }


    int countPairs(Node* root1, Node* root2, int x){
        
        int ans = 0;
        solve(root1, root2, x, ans);
        return ans;
        
        
        
    }
