In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.
It can have between 1 and 2h nodes inclusive at the last level h.
Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
 bool isCompleteTree(TreeNode* root) {
      queue<TreeNode*>q;
      bool past=false;
      q.push(root);
        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();
            if(front==NULL){
                past=true;
            }
            else{
                if(past==true){
                    return false;
                }
                q.push(front->left);
                q.push(front->right);
            }
        }
        return true;
    }
