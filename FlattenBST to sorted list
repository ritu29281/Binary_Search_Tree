Input:
          5
        /    \
       3      7
      /  \    /   \
     2   4  6     8
Output: 2 3 4 5 6 7 8
Explanation: 
After flattening, the tree looks
like this
    2
     \
      3
       \
        4
         \
          5
           \
            6
             \
              7
               \
                8
Here, left of each node points
to NULL and right contains the
next node.


class Solution
{
public:
    Node *flattenBST(Node *root)
    {
       if(root==NULL){
           return NULL;
       }
       Node* head=flattenBST(root->left);
       root->left= NULL;
       root->right= flattenBST(root->right);
       Node* temp=head;
       if(head!=NULL){
           Node* temp=head;
           while(temp && temp->right){
               temp=temp->right;
           }
           temp->right=root;
       }
       else{
           head=root;
       }
       return head;
    }
};
