Two nodes of a binary tree are cousins if they have the same depth with different parents.
Input: root = [1,2,3,4], x = 4, y = 3
Output: false
CODE:

TreeNode* isParent(TreeNode* root, int x){
        if(root==NULL) return NULL;
        if(root->val==x) return NULL;
        if(root->left!=NULL && root->left->val==x) return root;
         if(root->right!=NULL && root->right->val==x) return root;
         if(isParent(root->left,x)!=NULL) return isParent(root->left,x);
        else{
            return isParent(root->right,x);
        }
       
    }
    int depth(TreeNode* root,int x){
     if(root==NULL)return 1000;
     if(root->val==x)return 0;
     int left=depth(root->left,x);
     int right=depth(root->right,x);
     int d=min(left,right)+1;
     return d;
    }
    bool isCousins(TreeNode* root, int x, int y) {
        if(depth(root,x)==depth(root,y) && isParent(root,x)!= isParent(root,y))
            return true;
        return false;
    }
!-----------------------OR------------------------!
  int xdepth, ydepth, xparent, yparent;
    // depth of x and y and parent of x and y.
    void depth(TreeNode* root, int x, int y, int dep, int par_val){
    if(root==NULL) return;
    
    if(root->val==x){
        xdepth=dep;
        xparent=par_val;
        return;
    }
    if(root->val==y){
        ydepth=dep;
        yparent=par_val;
        return;
    }
    depth(root->left, x, y, dep+1, root->val);
    depth(root->right, x, y, dep+1, root->val);
}
bool isCousins(TreeNode* root, int x, int y) {
    // simple if you have the same value as parent then you will nver be cousinn how can a parent be cousin of the child :(
    if(root->val==x || root->val==y) return false;

    // check for the root with level zero and first parent val zero.
    depth(root, x, y, 0, 0);
    
    //if they have the same level and they dont have the same parent that means they are the cousins. 
    if(xdepth==ydepth && xparent!=yparent) return true;
    //otherwise false.
    return false;
}
